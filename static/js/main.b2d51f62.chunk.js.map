{"version":3,"sources":["components/cards/card.component.jsx","components/card-list/card-list-component.jsx","components/searchbar/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChangeEvent","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAMaA,EAAO,SAACC,GAAD,OAEhB,cADA,CACA,OAAKC,UAAU,QAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCPdC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAY,WAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,EAAhC,cAAWA,EAAQC,UCJlBM,G,MAAY,SAACX,GAAD,OAErB,aADA,CACA,SAAOY,KAAK,SACZX,UAAU,SACVY,YAAab,EAAMa,YACnBC,SAAWd,EAAMe,sBCyCNC,E,kDA3Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAS,GACTS,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAEzC,WAAS,IAAD,SAE0BE,KAAKR,MAA9BR,EAFD,EAECA,SAAUS,EAFX,EAEWA,YAGXQ,EAAkBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC7CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAElD,OAIE,cAHA,CAGA,OAAK3B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWY,YAAa,iBAAiBE,kBAAoB,SAAAe,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACvG,cAAC,EAAD,CAAUvB,SAAUiB,W,GA7BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b2d51f62.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cards.styles.css';\r\n\r\n//This is a fucntional component and not class component unlinke App.js file\r\n//So being a funtional component it does not have access to state, lifecycle methods, etc.\r\n//It only works on props.\r\nexport const Card = (props) => (\r\n    //size is optional &size=180x180\r\n    <div className=\"cards\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <h3>{props.monster.email}</h3>\r\n    </div>\r\n   \r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../cards/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className = \"cardList\">\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}> </Card>\r\n        ))}\r\n    </div>\r\n)\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => (\r\n    //We will take placeholder as props object because it can be dynamic accodiring to what we want to search.\r\n    <input type='search'\r\n    className='search'\r\n    placeholder={props.placeholder}\r\n    onChange= {props.handleChangeEvent}\r\n    />\r\n)\r\n\r\n/*\r\nBoth methods of declaring props are correct\r\nexport const SearchBox = ({placeholder,handleChangeEvent}) => (\r\n    <input type='search'\r\n    className='search' \r\n    placeholder={placeholder}\r\n    onChange= {handleChangeEvent}\r\n    />\r\n)\r\n*/","import './App.css';\nimport {Component} from 'react';\nimport {CardList} from './components/card-list/card-list-component'; \nimport {SearchBox} from './components/searchbar/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField:''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n  render(){\n\n    const {monsters, searchField} = this.state;\n    //this is creating a new array in filteredMonster variable.\n    //filter method iterates over all the monster from monsters variable and perform search according to the searchfiled and creates a new array and pass it to variable.\n    const filteredMonster = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      //Here e is the object for event called on onchange function whihc has a field called target that holds \n      //the html element that called that event.\n      //So here that elemnt is input tag and its value can be accessed by e.target.value\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder =\"Search Monster\" handleChangeEvent ={e => this.setState({searchField: e.target.value})} />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n    //So finally, what is happening is that everytime a change is made inside state object. i.e inside searchField , render function called again.\n    //As render function is called, new values are passed to CardList as FilteredMonsters is called again and it shows monsters accordingly.\n  }\n  \n}\n/*\n<input type=\"search\" placeholder=\"Search Monster\" \nonChange={e => {\n  this.setState({searchField:e.target.value}, () => {console.log(this.state)});\n}} />\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}